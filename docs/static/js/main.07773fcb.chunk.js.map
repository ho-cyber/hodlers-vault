{"version":3,"sources":["utils/metaMask.ts","slices/walletSlice.ts","utils/tokens.ts","utils/supportedChains.ts","components/App.tsx","slices/pageSlice.ts","store.ts","reportWebVitals.ts","components/Token.tsx","assets/hodl.jpg","assets/vault.jpg","assets/dip.jpg","assets/ethereum.png","assets/ipfs.png","components/LandingPage.tsx","components/TopLevelThing.tsx","assets/createVault.png","assets/ownership.png","assets/fund.png","assets/release.png","assets/evil.png","components/HowItWorks.tsx","index.tsx"],"names":["isMetaMaskInstalled","a","getWeb3ProviderOrNull","isWalletConnected","getSelectedAddress","getWeb3Provider","provider","Error","window","ethereum","request","method","accounts","length","slice","createSlice","name","initialState","isLoading","isValidChain","chainId","reducers","setIsMetaMaskInstalled","state","action","payload","setIsWalletConnected","setIsChainValid","setChainId","setIsLoadingFinished","actions","selectWallet","wallet","tokens","chainIdToString","getTokenContractAddress","token","chains","App","props","useSelector","dispatch","useDispatch","handleChainChanged","on","handleAccountsChanged","location","reload","supportedChains","indexOf","useEffect","Container","style","marginTop","textAlign","display","justifyContent","Button","onClick","connect","Message","error","children","currentPage","setCurrentPage","selectPage","page","configureStore","reducer","walletReducer","pageReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Token","useState","loading","setLoading","createMode","setCreateMode","Date","selectedDate","setSelectedDate","selectedToken","setSelectedToken","fundMode","setFundMode","selectedAmount","setSelectedAmount","showStuff","setShowStuff","setFundModeForVault","address","isFundMode","creatingVault","setCreatingVault","funding","setFunding","releasing","setReleasing","setFundingForVault","isFunding","setReleasingForVault","isReleasing","vaults","setVaults","now","registryAddress","parseVaults","rawShit","vaultCount","i","vault","vaultAddress","tokenSymbol","balance","getReleaseTimestamp","releaseDate","getEthBalance","getBalanceOf","vaultObject","push","getVaults","web3","Web3","givenProvider","registry","eth","Contract","Registry","abi","methods","from","call","res","contract","BaseVault","releaseTimestampInSeconds","link","getTokenContract","utils","balanceOf","fromWei","getBalance","EthVault","deploy","data","bytecode","arguments","Math","round","getTime","send","finally","resetVaultFlags","ERC20Vault","amount","transfer","toWei","toString","resetFundFlags","ethVault","fund","value","release","IERC20","renderFundButton","Input","type","onChange","e","target","fundEth","defaultValue","minDate","selected","createVault","disabled","Table","colSpan","Object","keys","map","date","getFullYear","getMonth","getDate","LandingPage","block","width","fontSize","alignItems","src","imageHodl","height","imageVault","imageDip","imageEthereum","imageIPFS","margin","to","primary","TopLevelThing","menuItem","Menu","inverted","attached","Item","active","href","padding","icon","HowItWorks","Header","as","imageCreateVault","imageOwnership","Divider","imageFund","imageRelease","imageEvil","ReactDOM","render","store","path","exact","document","getElementById"],"mappings":"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","file":"static/js/main.07773fcb.chunk.js","sourcesContent":["export async function isMetaMaskInstalled()  {\n    return await getWeb3ProviderOrNull() !== null;\n}\n\nexport async function isWalletConnected() {\n    try {\n        await getSelectedAddress();\n        return true;\n    }catch(e){\n        return false;\n    }\n}\n\nexport function getWeb3Provider() {\n    let provider = getWeb3ProviderOrNull();\n    if(!provider){\n        throw new Error('No provider');\n    }\n    return provider;\n}\n\nexport function getWeb3ProviderOrNull() {\n    if( typeof((window as any).ethereum) !== \"undefined\"){\n        return (window as any).ethereum;\n    }\n    return null;\n}\n\nexport async function getSelectedAddress(){\n    const provider = getWeb3Provider();\n    const accounts = await provider.request({ method: 'eth_accounts' });\n    if(accounts.length === 0){\n        throw new Error('Found no account');\n    }\n    return accounts[0];\n}","import { createSlice } from '@reduxjs/toolkit';\nimport IWalletState from '../states/IWalletState';\n\nexport const slice = createSlice({\n  name: 'wallet',\n  initialState: {\n    isLoading: true,\n    isMetaMaskInstalled: false,\n    isWalletConnected: false,\n    isValidChain: null,\n    chainId: null,\n  },\n  reducers: {\n    setIsMetaMaskInstalled: (state, action) => {\n      state.isMetaMaskInstalled = action.payload as boolean;\n    },\n    setIsWalletConnected: (state, action) => {\n      state.isWalletConnected = action.payload as boolean;\n    },\n    setIsChainValid: (state, action) => {\n      state.isValidChain = action.payload;\n      if(action.payload !== true){\n        state.chainId = null;\n      }\n    },\n    setChainId: (state, action) => {\n      state.chainId= action.payload;\n    },\n    setIsLoadingFinished: (state) => {\n      state.isLoading = false;\n    }\n  },\n});\n\nexport const { setIsMetaMaskInstalled, setIsWalletConnected, setIsLoadingFinished, setIsChainValid, setChainId } = slice.actions;\n\nexport const selectWallet = (state: { wallet: IWalletState; }) => state.wallet as IWalletState;\n\nexport default slice.reducer;\n","const tokens: {\n    [key: string]: {\n        [key: string]: string\n    };\n} = {\n    \"0x1\": {\n    },\n    \"0x4\": {\n        \"LINK\": \"0x01BE23585060835E02B77ef475b0Cc51aA1e0709\"\n    }\n}\n\nexport default tokens;","import tokens from './tokens';\n\nexport function chainIdToString(chainId: string) {\n    switch(chainId) {\n        case \"0x1\": \n            return \"Mainnet\"\n        case \"0x4\":\n            return \"Rinkeby\"\n        default:\n            return \"Unknown\"\n    }\n}\n\nexport function getTokenContractAddress(token: string, chainId: string) {\n    return tokens[chainId][token];\n}\n\nexport const chains = [\n    // \"0x1\", // Mainnet\n    \"0x4\"  // Rinkeby\n]","import { useEffect } from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { getWeb3Provider, isMetaMaskInstalled, isWalletConnected } from '../utils/metaMask';\nimport {\n  setIsChainValid,\n  setIsLoadingFinished,\n  setIsMetaMaskInstalled,\n  selectWallet,\n  setIsWalletConnected,\n  setChainId\n} from '../slices/walletSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { chainIdToString, chains as supportedChains } from '../utils/supportedChains';\nimport { Button, Container, Message } from 'semantic-ui-react';\n\nfunction App(props: any) {\n  const wallet = useSelector(selectWallet);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    (async () => {\n        dispatch(setIsMetaMaskInstalled(await isMetaMaskInstalled()));\n        dispatch(setIsWalletConnected(await isWalletConnected()));\n        dispatch(setIsLoadingFinished());\n        \n        if(wallet.isMetaMaskInstalled) {\n          const provider = getWeb3Provider();\n\n          provider.on('accountsChanged', handleAccountsChanged);\n          provider.on('chainChanged', handleChainChanged);\n\n          // TODO duplicate code\n          const chainId = await provider.request({ method: 'eth_chainId' });\n          handleChainChanged(chainId);\n        }\n    })();\n  })\n\n  async function connect() {\n    const provider = getWeb3Provider();\n    await provider.request({ method: 'eth_requestAccounts' });\n    dispatch(setIsWalletConnected(true));\n\n    // TODO duplicate code\n    const chainId = await provider.request({ method: 'eth_chainId' });\n    handleChainChanged(chainId);\n\n    provider.on('accountsChanged', handleAccountsChanged);\n    provider.on('chainChanged', handleChainChanged);\n    \n    window.location.reload();\n  }\n\n  function handleChainChanged(chainId: string) {\n    // If the chainId is not supported, we will display the warning\n    if(supportedChains.indexOf(chainId) === -1){\n      dispatch(setIsChainValid(false));\n    }else{\n      // Set chain ID if it is changed\n      if(wallet.chainId !== chainId){\n        dispatch(setChainId(chainId));\n      }\n      \n      // Set chain validity status if it was previously invalid\n      if(wallet.isValidChain === false){\n        dispatch(setIsChainValid(true));\n      }\n    }\n  }\n\n  function handleAccountsChanged(accounts: any) {\n    if (accounts.length === 0) {\n      // MetaMask is locked or the user has not connected any accounts\n      window.location.reload();\n    } \n}\n  \n  return (\n    <Container style={{marginTop: 10}}>\n      <div>\n        {\n          wallet.chainId !== null && <p style={{textAlign: 'center'}}>You're on {chainIdToString(wallet.chainId as string)}</p>\n        }\n        {\n          wallet.isValidChain === false && <p style={{textAlign: 'center'}}>Wrong chain. We only support Rinkeby. Please switch to Rinkeby and refresh the page.</p>\n        }\n        <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        {\n          wallet.isMetaMaskInstalled ? !wallet.isWalletConnected && <Button onClick={() => connect()}>Connect</Button> : <Message error>MetaMask is not installed. Please install MetaMask.</Message>\n        }\n        </div>\n       \n        {\n          props.children\n        }\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const slice = createSlice({\n  name: 'page',\n  initialState: {\n    currentPage: \"home\"\n  },\n  reducers: {\n    setCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    }\n  },\n});\n\nexport const { setCurrentPage } = slice.actions;\n\nexport const selectPage = (state: any) => state.page ;\n\nexport default slice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport walletReducer from './slices/walletSlice';\nimport pageReducer from './slices/pageSlice';\n\nexport default configureStore({\n  reducer: {\n    wallet: walletReducer,\n    page: pageReducer\n  },\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Web3 from \"web3\";\nimport ERC20Vault from '../abis/ERC20Vault.json';\nimport BaseVault from '../abis/BaseVault.json';\nimport EthVault from '../abis/EthVault.json';\nimport IERC20 from '../abis/IERC20.json';\nimport Registry from '../abis/Registry.json';\nimport { selectWallet } from \"../slices/walletSlice\";\nimport { getSelectedAddress } from \"../utils/metaMask\";\nimport { getTokenContractAddress } from \"../utils/supportedChains\";\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Button, Input, Table } from \"semantic-ui-react\";\n\ninterface IVaults {\n    [key: string] : Array<{\n        address: string;\n        balance: string;\n        releaseDate: Date;\n    }>\n};\n\nexport default function Token() {\n    const wallet = useSelector(selectWallet);\n\n    const [loading, setLoading] = useState(true);\n\n    const [createMode, setCreateMode] = useState(false);\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [selectedToken, setSelectedToken] = useState(\"ETH\");\n\n    const [fundMode, setFundMode] = useState({} as {[key:string]: boolean});\n    const [selectedAmount, setSelectedAmount] = useState(\"0\");\n\n    const [showStuff, setShowStuff] = useState(false);\n\n    function setFundModeForVault(address: string, isFundMode: boolean) {\n        setFundMode({\n            [address]: isFundMode\n        });\n    }\n\n    const [creatingVault, setCreatingVault] = useState(false);\n    const [funding, setFunding] = useState({} as {[key:string]: boolean});\n    const [releasing, setReleasing] = useState({} as {[key:string]: boolean});\n\n    function setFundingForVault(address: string, isFunding: boolean) {\n        setFunding({\n            ...funding,\n            [address]: isFunding\n        });\n    }\n\n    function setReleasingForVault(address: string, isReleasing: boolean) {\n        setReleasing({\n            ...releasing,\n            [address]: isReleasing\n        });\n    }\n\n    const [vaults, setVaults] = useState({} as IVaults);\n    const now = new Date();\n\n    const registryAddress = \"0x64e3A6F2443d135176F2c82FA9303DA6B4606412\";\n\n    useEffect(() => {\n        (async () => {\n            if(Web3.givenProvider && (await Web3.givenProvider.request({ method: 'eth_accounts' })).length > 0){\n                setShowStuff(true);\n                await getVaults();\n            }\n            setLoading(false);\n        })();\n    }, []);\n\n    async function parseVaults(rawShit: Array<string>) {\n        const vaults: IVaults = {};\n        const vaultCount = rawShit.length;\n        for (let i = 0; i < vaultCount; i++) {\n            const vault = rawShit[i];\n            const vaultAddress = vault[0];\n            const tokenSymbol = vault[1];\n\n            let balance: string;\n            const releaseDate = new Date(await getReleaseTimestamp(vaultAddress) * 1000);\n            if(tokenSymbol === \"ETH\"){\n                balance = await getEthBalance(vaultAddress);\n            }else{\n                balance = await getBalanceOf(vaultAddress);\n            }\n\n            const vaultObject = {\n                address: vaultAddress,\n                balance,\n                releaseDate\n            };\n\n            if (vaults[tokenSymbol]) {\n                vaults[tokenSymbol].push(vaultObject);\n            }else{\n                vaults[tokenSymbol] = [vaultObject];\n            }\n        }\n        return vaults;\n    }\n\n    async function getVaults() {\n        \n        const web3 = new Web3(Web3.givenProvider);\n        const registry = new web3.eth.Contract(Registry.abi as any, registryAddress);\n\n        const res = await registry.methods.getVaults().call({\n            from: await getSelectedAddress()\n        });\n        setVaults(await parseVaults(res));\n    }\n\n    async function getReleaseTimestamp(address: string) {\n        const web3 = new Web3(Web3.givenProvider);\n        const contract = new web3.eth.Contract(BaseVault.abi as any, address);\n        return await contract.methods.releaseTimestampInSeconds().call();\n    }\n\n    async function getBalanceOf(address: string) {\n        const web3 = new Web3(Web3.givenProvider);\n        const link = getTokenContract(web3);\n        return web3.utils.fromWei(await link.methods.balanceOf(address).call());\n    }\n\n    async function getEthBalance(address: string) {\n        const web3 = new Web3(Web3.givenProvider);\n        return web3.utils.fromWei(await web3.eth.getBalance(address));\n    }\n\n    async function createVault(token: string) {\n        setCreatingVault(true);\n        const web3 = new Web3(Web3.givenProvider);\n    \n        if(token === \"ETH\"){\n            const contract = new web3.eth.Contract(EthVault.abi as any);\n            contract.deploy({\n                data: EthVault.bytecode,\n                arguments: [registryAddress, Math.round(selectedDate.getTime() / 1000)]\n            })\n            .send({\n                from: await getSelectedAddress()\n            })\n            .then(async () => await getVaults())\n            .finally(() => resetVaultFlags());\n        }\n\n        if(token === \"LINK\") {\n            const contract = new web3.eth.Contract(ERC20Vault.abi as any);\n            contract.deploy({\n                data: ERC20Vault.bytecode,\n                arguments: [ getTokenContractAddress(token, wallet.chainId as string), \"LINK\", registryAddress,  Math.round(selectedDate.getTime() / 1000)]\n            })\n            .send({\n                from: await getSelectedAddress()\n            })\n            .then(async () => await getVaults())\n            .finally(() => resetVaultFlags());\n        }\n    }\n\n    function resetVaultFlags() {\n        setCreatingVault(false); setCreateMode(false)\n    }\n\n    async function fund(vaultAddress: string, amount: string) {\n        setFundingForVault(vaultAddress, true);\n        const web3 = new Web3(Web3.givenProvider);\n        const link = getTokenContract(web3);\n        link.methods.transfer(vaultAddress, web3.utils.toWei(amount.toString()))\n        .send({\n            from: await getSelectedAddress()\n        })\n        .then(async () => await getVaults())\n        .finally(() => resetFundFlags(vaultAddress));\n    }\n\n    async function fundEth(vaultAddress: string, amount: string) {\n        setFundingForVault(vaultAddress, true);\n        const web3 = new Web3(Web3.givenProvider);\n        const ethVault = new web3.eth.Contract(EthVault.abi as any, vaultAddress);\n        ethVault.methods.fund()\n        .send({\n            from: await getSelectedAddress(),\n            value: web3.utils.toWei(amount.toString())\n        })\n        .then(async () => await getVaults())\n        .finally(() => resetFundFlags(vaultAddress));\n    }\n\n    function resetFundFlags(address: string) {\n        setFundMode({});\n        setSelectedAmount(\"0\");\n        setFundingForVault(address, false);\n    }\n\n    async function release(address: string) {\n        setReleasingForVault(address, true);\n        const web3 = new Web3(Web3.givenProvider);\n        const contract = new web3.eth.Contract(BaseVault.abi as any, address);\n\n        contract.methods.release()\n        .send({\n            from: await getSelectedAddress()\n        })\n        .then(async () => await getVaults())\n        .finally(() => setReleasingForVault(address, false));\n    }\n\n    function getTokenContract(web3: Web3) {\n        // LINK token contract on Rinkeby: 0x01BE23585060835E02B77ef475b0Cc51aA1e0709\n        return new web3.eth.Contract(IERC20.abi as any, \"0x01BE23585060835E02B77ef475b0Cc51aA1e0709\");\n    }\n\n    function formatDate(date: Date){\n        return date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\n    }\n\n    function renderFundButton(token: string, vaultAddress: string) {\n        return fundMode[vaultAddress] ? <> \n            <Input type=\"number\" value={selectedAmount} onChange={e=>setSelectedAmount(e.target.value)}/> &nbsp; \n            <Button onClick={() => token === \"ETH\" ? fundEth(vaultAddress, selectedAmount) : fund(vaultAddress, selectedAmount)}>Go</Button> &nbsp; \n            <Button onClick={() => setFundModeForVault(vaultAddress, false)}>Cancel</Button>\n        </> : <Button onClick={()=>setFundModeForVault(vaultAddress, true)}>Fund</Button>\n    }\n\n    return <>\n        <div>\n            {\n                showStuff && <>\n                {\n                    !createMode ? <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                        <Button disabled={creatingVault} onClick={() => setCreateMode(true)}>Create Vault</Button>\n                    </div>\n                    : <div style={{ textAlign: 'right'}}>\n                    {\n                        creatingVault ? <p>Creating {selectedToken} Vault. It could take up to 1 minute. Please wait...</p> : <>\n                            <p>Choose the Release date. Please note that you can only do this ONCE. After that, you fund won't be available until the Release date and you won't be able to change it!</p>\n                            <select onChange={e => setSelectedToken(e.target.value)} defaultValue={selectedToken}>\n                                <option value=\"ETH\">ETH</option>\n                                <option value=\"LINK\">LINK</option>\n                            </select> &nbsp;\n                            <DatePicker minDate={now} selected={selectedDate} onChange={(value: any) => setSelectedDate(value)}/> &nbsp; <Button onClick={e => createVault(selectedToken)}>Go</Button> &nbsp; <Button onClick={() => setCreateMode(false)}>Cancel</Button>\n                        </>\n                    }\n                    </div>\n                }\n                </>\n            }\n        </div>\n    \n        <Table>\n            <thead>\n                <tr>\n                    <th>Token</th>\n                    <th>Vault</th>\n                    <th>Balance</th>\n                    <th>Release Date</th>\n                    <th>Action</th>\n                </tr>\n            </thead>\n            {\n                loading ? <tbody>\n                    <tr>\n                        <td colSpan={5}>Loading your precious Vaults...</td>\n                    </tr>\n                    </tbody> : \n                <tbody>\n                    {\n                        Object.keys(vaults).length > 0 ? \n                        Object.keys(vaults).map(token => \n                            vaults[token].map(vault => {\n                                return <tr key={vault.address}>\n                                <td>{token}</td>\n                                <td>{vault.address}</td>\n                                <td>{vault.balance} {token}</td>\n                                <td>{formatDate(vault.releaseDate)}</td>\n                                <td>\n                                    {\n                                        funding[vault.address] ? <span>Funding. It could take up to 1 minute...</span> :\n                                        releasing[vault.address] ? <span>Releasing. It could take up to 1 minute...</span> : <>\n                                            {renderFundButton(token, vault.address)} &nbsp; <Button disabled={now < vault.releaseDate} onClick={() => release(vault.address)}>Release</Button>\n                                        </>\n                                    }\n                                </td>\n                            </tr>\n                        })) : <tr>\n                            <td colSpan={5} style={{textAlign: 'center'}}>Looks like you don't have any Vault yet.</td>\n                        </tr>\n                    }\n                </tbody>\n            }\n        </Table>\n    </>\n}","export default __webpack_public_path__ + \"static/media/hodl.17dc5bd1.jpg\";","export default __webpack_public_path__ + \"static/media/vault.337f1483.jpg\";","export default __webpack_public_path__ + \"static/media/dip.b063e16f.jpg\";","export default __webpack_public_path__ + \"static/media/ethereum.bbcce33a.png\";","export default __webpack_public_path__ + \"static/media/ipfs.2c899a97.png\";","import { Button, Container, Message } from \"semantic-ui-react\";\nimport imageHodl from \"../assets/hodl.jpg\";\nimport imageVault from '../assets/vault.jpg';\nimport imageDip from '../assets/dip.jpg';\nimport imageEthereum from '../assets/ethereum.png';\nimport imageIPFS from '../assets/ipfs.png';\nimport { Link } from \"react-router-dom\";\nimport {\n    selectPage,\n    setCurrentPage,\n  } from '../slices/pageSlice';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport default function LandingPage() \n{\n    const page = useSelector(selectPage);\n    const dispatch = useDispatch();\n\n    const block = {\n        display: \"block\",\n        width: \"300px\",\n        fontSize: \"1.1em\",\n    }\n\n    return  <Container style={{ width: '650px', marginTop: '20px'}}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n            <Message style={block}>Welcome to HODLer's Vault. HODLing is hard. But don't worry, we got you.</Message>\n            <div style={{ ...block, textAlign: 'center' }}>\n                <img src={imageHodl} width='80%' height='80%'/>\n            </div>\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n            <div style={{ ...block, textAlign: 'center' }}>\n                <img src={imageVault} width='30%' height='30%'/>\n            </div>\n            <Message style={block}>With HODLer's Vault, your tokens are locked in a vault that YOU own and only YOU have access to.</Message>\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n            <Message style={block}>You cannot withdraw your tokens until the Release date that you set, and this prevents you from premature selling.</Message>\n            <div style={{ ...block, textAlign: 'center' }}>\n                <img src={imageDip} width='70%' height='70%'/>\n            </div>\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n            <div style={{ ...block, textAlign: 'center' }}>\n                <img src={imageEthereum} width='30%' height='30%'/>\n                <img src={imageIPFS} width='30%' height='30%'/>\n            </div>\n            <Message style={block}>HODLer's Vault is secured by the Ethereum blockchain and hosted on IPFS. We don't run on any centralized server, or have access to your funds. It's fully decentralized.</Message>\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'center', margin: 50}}>\n            <Link to=\"/tokens\">\n                <Button primary onClick={() => dispatch(setCurrentPage(\"tokens\")) }>\n                    So what are you waiting for? Join the Diamond Hand League.\n                </Button>\n            </Link>\n            \n        </div>\n\n        <div style={{ display: 'flex', justifyContent: 'flex-end'}}>\n            <small>Currently, for the testing purpose, we support ETH and LINK on the Rinkeby network. More are comming soon.</small>\n        </div>\n    </Container>\n}","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Menu, } from \"semantic-ui-react\";\nimport {\n    selectPage,\n    setCurrentPage,\n  } from '../slices/pageSlice';\n\nexport default function TopLevelThing(props: any) \n{\n    const page = useSelector(selectPage);\n    const dispatch = useDispatch();\n\n    const menuItem = {\n        width: 150,\n        justifyContent: 'center',\n        height: '100%'\n    }\n\n    return <>\n        <Menu inverted attached style={{ height: 50, justifyContent: 'center' }} >\n            <Link to=\"/\">\n                <Menu.Item\n                    style={menuItem}\n                    name=\"home\"\n                    active={page.currentPage == \"home\"}\n                    onClick={() => dispatch(setCurrentPage(\"home\"))}\n                />\n            </Link>\n            \n            <Link to=\"/tokens\">\n                <Menu.Item\n                    style={menuItem}\n                    name=\"tokens\"\n                    active={page.currentPage == \"tokens\"}\n                    onClick={() => dispatch(setCurrentPage(\"tokens\"))}\n                />\n            </Link>\n            \n            <Link to=\"howitworks\">\n                <Menu.Item\n                    style={menuItem}\n                    name={\"how it works\"}\n                    active={page.currentPage == \"how it works\"}\n                    onClick={() => dispatch(setCurrentPage(\"how it works\"))}\n                />\n            </Link>\n            \n            <a href=\"https://github.com/d0n-th/hodlers-vault\" target=\"_blank\" style={{ padding:0 }}>\n                <Menu.Item \n                    style={{ height: '100%' }}\n                    icon=\"github\"\n                    onClick={() => {}}\n                />\n            </a>\n            \n            </Menu>\n        {\n            props.children\n        }\n    </>\n}","export default __webpack_public_path__ + \"static/media/createVault.adef4847.png\";","export default __webpack_public_path__ + \"static/media/ownership.a7be344c.png\";","export default __webpack_public_path__ + \"static/media/fund.34f2cd18.png\";","export default __webpack_public_path__ + \"static/media/release.940cb00f.png\";","export default __webpack_public_path__ + \"static/media/evil.8938b5a9.png\";","import { Container, Divider, Header } from \"semantic-ui-react\";\nimport imageCreateVault from '../assets/createVault.png';\nimport imageOwnership from '../assets/ownership.png';\nimport imageFund from '../assets/fund.png';\nimport imageRelease from '../assets/release.png';\nimport imageEvil from '../assets/evil.png';\n\nexport function HowItWorks() {\n    return <Container style={{ marginTop: 50, textAlign: 'center', fontSize: '1.1em', width: 700}} >\n        <div>\n            <Header as=\"h1\">Creating Vault</Header>\n            <p>\n                When you create a new vault, it will be deployed by YOU as a smart contract on the Ethereum blockchain, with YOU being the owner of it.\n            </p>\n            <p>Only the owner can fund and release the vault.</p>\n        </div>\n        <div>\n            <img src={imageCreateVault}/>\n            <img src={imageOwnership}/>\n        </div>\n        <Divider/>\n        <div>\n            <Header as=\"h1\">Funding</Header>\n            <p>\n                The owner can fund the vault with Ether or any other token on the Ethereum blockchain.\n            </p>\n        </div>\n        <div>\n            <img src={imageFund}/>\n        </div>\n        <Divider/>\n        <div>\n            <Header as=\"h1\">Releasing</Header>\n            <p>The owner can release the fund from the vault when the Release date is reached.</p>\n        </div>\n        <div>\n            <img src={imageRelease}/>\n        </div>\n        <Divider/>\n        <div>\n            <Header as=\"h1\">Ownership</Header>\n            <p>Nobody can fund or withdraw from the Vault without being an owner. That means we don't have access to your funds, neither do any other people.</p>\n        </div>\n        <div>\n            <img src={imageEvil}/>\n        </div>\n    </Container>\n}","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './components/App';\nimport store from './store'\nimport 'semantic-ui-css/semantic.min.css'\nimport reportWebVitals from './reportWebVitals';\nimport Token from './components/Token';\nimport LandingPage from './components/LandingPage';\nimport TopLevelThing from './components/TopLevelThing';\nimport { HowItWorks } from './components/HowItWorks';\nimport { BrowserRouter, HashRouter, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <TopLevelThing>\n        <Switch>\n          <Route path=\"/tokens\"><App><Token/></App></Route>\n          <Route exact path=\"/howitworks\"><HowItWorks/></Route>\n          <Route path=\"/\"><LandingPage/></Route>\n        </Switch>\n      </TopLevelThing>\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}